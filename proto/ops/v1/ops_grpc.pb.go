// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: ops/v1/ops.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OpsServiceClient is the client API for OpsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpsServiceClient interface {
	ListSupportedDeployments(ctx context.Context, in *ListSupportedDeploymentsRequest, opts ...grpc.CallOption) (*ListSupportedDeploymentsResponse, error)
	GetDeploymentStatus(ctx context.Context, in *GetDeploymentStatusRequest, opts ...grpc.CallOption) (*GetDeploymentStatusResponse, error)
	ListSupportedTasks(ctx context.Context, in *ListSupportedTasksRequest, opts ...grpc.CallOption) (*ListSupportedTasksResponse, error)
}

type opsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOpsServiceClient(cc grpc.ClientConnInterface) OpsServiceClient {
	return &opsServiceClient{cc}
}

func (c *opsServiceClient) ListSupportedDeployments(ctx context.Context, in *ListSupportedDeploymentsRequest, opts ...grpc.CallOption) (*ListSupportedDeploymentsResponse, error) {
	out := new(ListSupportedDeploymentsResponse)
	err := c.cc.Invoke(ctx, "/ops.v1.OpsService/ListSupportedDeployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opsServiceClient) GetDeploymentStatus(ctx context.Context, in *GetDeploymentStatusRequest, opts ...grpc.CallOption) (*GetDeploymentStatusResponse, error) {
	out := new(GetDeploymentStatusResponse)
	err := c.cc.Invoke(ctx, "/ops.v1.OpsService/GetDeploymentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opsServiceClient) ListSupportedTasks(ctx context.Context, in *ListSupportedTasksRequest, opts ...grpc.CallOption) (*ListSupportedTasksResponse, error) {
	out := new(ListSupportedTasksResponse)
	err := c.cc.Invoke(ctx, "/ops.v1.OpsService/ListSupportedTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpsServiceServer is the server API for OpsService service.
// All implementations must embed UnimplementedOpsServiceServer
// for forward compatibility
type OpsServiceServer interface {
	ListSupportedDeployments(context.Context, *ListSupportedDeploymentsRequest) (*ListSupportedDeploymentsResponse, error)
	GetDeploymentStatus(context.Context, *GetDeploymentStatusRequest) (*GetDeploymentStatusResponse, error)
	ListSupportedTasks(context.Context, *ListSupportedTasksRequest) (*ListSupportedTasksResponse, error)
	mustEmbedUnimplementedOpsServiceServer()
}

// UnimplementedOpsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOpsServiceServer struct {
}

func (UnimplementedOpsServiceServer) ListSupportedDeployments(context.Context, *ListSupportedDeploymentsRequest) (*ListSupportedDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSupportedDeployments not implemented")
}
func (UnimplementedOpsServiceServer) GetDeploymentStatus(context.Context, *GetDeploymentStatusRequest) (*GetDeploymentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentStatus not implemented")
}
func (UnimplementedOpsServiceServer) ListSupportedTasks(context.Context, *ListSupportedTasksRequest) (*ListSupportedTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSupportedTasks not implemented")
}
func (UnimplementedOpsServiceServer) mustEmbedUnimplementedOpsServiceServer() {}

// UnsafeOpsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpsServiceServer will
// result in compilation errors.
type UnsafeOpsServiceServer interface {
	mustEmbedUnimplementedOpsServiceServer()
}

func RegisterOpsServiceServer(s grpc.ServiceRegistrar, srv OpsServiceServer) {
	s.RegisterService(&OpsService_ServiceDesc, srv)
}

func _OpsService_ListSupportedDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSupportedDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpsServiceServer).ListSupportedDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ops.v1.OpsService/ListSupportedDeployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpsServiceServer).ListSupportedDeployments(ctx, req.(*ListSupportedDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpsService_GetDeploymentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpsServiceServer).GetDeploymentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ops.v1.OpsService/GetDeploymentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpsServiceServer).GetDeploymentStatus(ctx, req.(*GetDeploymentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpsService_ListSupportedTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSupportedTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpsServiceServer).ListSupportedTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ops.v1.OpsService/ListSupportedTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpsServiceServer).ListSupportedTasks(ctx, req.(*ListSupportedTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OpsService_ServiceDesc is the grpc.ServiceDesc for OpsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ops.v1.OpsService",
	HandlerType: (*OpsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSupportedDeployments",
			Handler:    _OpsService_ListSupportedDeployments_Handler,
		},
		{
			MethodName: "GetDeploymentStatus",
			Handler:    _OpsService_GetDeploymentStatus_Handler,
		},
		{
			MethodName: "ListSupportedTasks",
			Handler:    _OpsService_ListSupportedTasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ops/v1/ops.proto",
}
